#!/usr/bin/bash
SHELL=/usr/bin/bash
#
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ================================================================================= #
# This Bash script was made to update and maintain a Manjaro or Arch system with    #
# Pacman and the alternative package managers - Pamac, Snap and Flatpak in a        #
# automatic manner, with as little as necessary user intervention required.         #
# It makes use of the functionality of PacUI for the system maintance.              #
# ================================================================================= #

# Here, the preferred AUR helper can be set manually by the user. for example, AUR_Helper="trizen" uses Trizen despite any other installed AUR helpers.
AUR_Helper="yay"

# Traps (ctrl+c)
trap killproc INT
function killproc() {
    echo -e "\n**** Received SIGINT, aborting! ****\n"
    kill -- -$$ && exit 2
}

# Local Variables:
SYMLINKCHECK=1
NOCONFIRMFLAG="0"

_check_aur_helper() {
    # Detect installed AUR helpers and chose one automatically:
    # check, if AUR_Helper variable is empty. more precise: check, if output of "$AUR_Helper" is zero
    if [[ -z "$AUR_Helper" ]]; then

        # Use "Pamac" as the first option to provide the best possible user experience since it can deal with "update conflicts"
        # check, if /usr/bin/pamac file exists (i.e. pamac is installed)
        if [ -x "$(command -v pamac)" ]; then
            AUR_Helper="pamac"

        elif [ -x "$(command -v yay)" ]; then
            AUR_Helper="yay"

        elif [ -x "$(command -v pikaur)" ]; then
            AUR_Helper="pikaur"

        elif [ -x "$(command -v aurman)" ]; then
            AUR_Helper="aurman"

        elif [ -x "$(command -v pakku)" ]; then
            AUR_Helper="pakku"

        elif [ -x "$(command -v trizen)" ]; then
            AUR_Helper="trizen"

        elif [ -x "$(command -v pacaur)" ]; then
            AUR_Helper="pacaur"

        elif [ -x "$(command -v paru)" ]; then
            AUR_Helper="paru"

        fi
    fi
}
_aur_update() {
    # define local variable, which indicates whether the installation process was successful or not.
    local install_successful
    install_successful=false

    # check, if $AUR_Helper variable is set to "yay". ATTENTION: sometimes, this requires [[ "$AUR_Helper" == "yay" ]] and sometimes test '$AUR_Helper' = "yay".
    # I do not know why this is the case.
    if [[ "$AUR_Helper" == "yay" ]]; then

        # execute "yay -Syu" command:
        if [[ "$NOCONFIRMFLAG" == "0" ]] || [[ "$NOCONFIRMFLAG" == "1" ]]; then
            # execute command "yay -Syu". if this command fails "false" is returned and the result is: "if ( false )"
            if (yay --sudoloop -Syu --noconfirm); then
                # only set $install_successful=true, if the command "yay -Syu" was executed without errors
                install_successful=true
            else
                install_successful=false
            fi
        else
            if [[ "$NOCONFIRMFLAG" == "2" ]]; then
                if (yay --sudoloop -Syu); then
                    install_successful=true
                else
                    install_successful=false
                fi
            fi
        fi

    elif [[ "$AUR_Helper" == "pikaur" ]]; then

        if [[ "$NOCONFIRMFLAG" == "0" ]] || [[ "$NOCONFIRMFLAG" == "1" ]]; then
            if (pikaur -Syu --noconfirm); then
                install_successful=true
            else
                install_successful=false
            fi
        else
            if [[ "$NOCONFIRMFLAG" == "2" ]]; then
                if (pikaur -Syu); then
                    install_successful=true
                else
                    install_successful=false
                fi
            fi
        fi

    elif [[ "$AUR_Helper" == "aurman" ]]; then

        if [[ "$NOCONFIRMFLAG" == "0" ]] || [[ "$NOCONFIRMFLAG" == "1" ]]; then
            if (aurman -Syu --noconfirm); then
                install_successful=true
            else
                install_successful=false
            fi
        else
            if [[ "$NOCONFIRMFLAG" == "2" ]]; then
                if (aurman -Syu); then
                    install_successful=true
                else
                    install_successful=false
                fi
            fi
        fi

    elif [[ "$AUR_Helper" == "pakku" ]]; then

        # "pakku" has no flag to skip confirmation dialogs, see: https://github.com/kitsunyan/pakku/issues/16
        if (pakku -Syu); then
            install_successful=true
        else
            install_successful=false
        fi

    elif [[ "$AUR_Helper" == "trizen" ]]; then

        if [[ "$NOCONFIRMFLAG" == "0" ]] || [[ "$NOCONFIRMFLAG" == "1" ]]; then
            if (trizen -Syu --noconfirm); then
                install_successful=true
            else
                install_successful=false
            fi
        else
            if [[ "$NOCONFIRMFLAG" == "2" ]]; then
                if (trizen -Syu); then
                    install_successful=true
                else
                    install_successful=false
                fi
            fi
        fi

    elif [[ "$AUR_Helper" == "pacaur" ]]; then

        if [[ "$NOCONFIRMFLAG" == "0" ]] || [[ "$NOCONFIRMFLAG" == "1" ]]; then
            if (pacaur -Syu --color always --noconfirm); then
                install_successful=true
            else
                install_successful=false
            fi
        else
            if [[ "$NOCONFIRMFLAG" == "2" ]]; then
                if (pacaur -Syu --color always); then
                    install_successful=true
                else
                    install_successful=false
                fi
            fi
        fi

    elif [[ "$AUR_Helper" == "pamac" ]]; then

        # execute "update -a" command:
        if [[ "$NOCONFIRMFLAG" == "0" ]] || [[ "$NOCONFIRMFLAG" == "1" ]]; then
            if (pamac update -a --devel --no-confirm); then
                install_successful=true
            else
                install_successful=false
            fi
        else
            if [[ "$NOCONFIRMFLAG" == "2" ]]; then
                if (pamac update -a --devel); then
                    install_successful=true
                else
                    install_successful=false
                fi
            fi
        fi

    elif [[ "$AUR_Helper" == "paru" ]]; then

        # execute "paru --sudoloop -Syu"
        if [[ "$NOCONFIRMFLAG" == "0" ]] || [[ "$NOCONFIRMFLAG" == "1" ]]; then
            if (paru --sudoloop -Syu --color always --noconfirm); then
                install_successful=true
            else
                install_successful=false
            fi
        else
            if [[ "$NOCONFIRMFLAG" == "2" ]]; then
                if (paru --sudoloop -Syu --color always); then
                    install_successful=true
                else
                    install_successful=false
                fi
            fi
        fi

    else

        if (sudo pacman -Syu --color always); then
            install_successful=true
        else
            install_successful=false
        fi

    fi

    # if one of the above update commands has failed, the following if-statement is true:
    if [[ "$install_successful" == "false" ]]; then

        # if one of the above update commands has failed, there are multiple points of failure.
        # first, we can force the update, but only for packages from the system repositories and not packages from the AUR. this means, we make sure package updates from system repositories fail:
        # the "sudo pacman -Syu --color always" command gets executed in any case in order to check its output.
        if ! (sudo pacman -Syu --color always); then

            # now, we are sure there is an active connection to the server/mirror/repository and package updates from there have failed. in this case, we can offer the user to forcefully install updates:
            local answer
            # ask, whether to force update the system and save answer in "answer" variable:
            echo -e " \e[1m Updates from system repositories have failed probably because of file conflicts. \e[0m"
            echo -e " \e[41m Do you want to forcefully overwrite all conflicting files? [y|N] \e[0m"
            # this "read" command only accepts 1 letter as answer. this feels faster and is enough in this situation.
            read -r -n 1 -e answer

            # if ENTER is pressed, the variable "answer" is empty. if "answer" is empty, its default value is "n".
            case ${answer:-n} in
            # do this, if "answer" is y or Y or yes or Yes or YES
            y | Y)
                sudo pacman -Syu --color always --overwrite='*'
                ;;
            *)
                # do this in all other cases
                echo -e " \e[1m Packages have not been updated.\e[0m"
                ;;
            esac

        fi

    fi
}

# Check for database lock file before update
_db_check() {
    if [[ -f /var/lib/pacman/db.lck ]]; then
        # ask, whether to remove the database lock:
        echo -e " \e[41m Database lock found, do you want to remove it? [Y|n]\e[0m"
        read -r -n 1 -e answer

        case ${answer:-n} in
        y | Y)
            echo " removing database lock file ... "
            sudo rm /var/lib/pacman/db.lck
            ;;
        *)
            # do this in all other cases
            echo -e " \e[1m Database lock was not removed, exiting ...\e[0m"
            exit 3
            ;;
            # end of "case" loop
        esac
    fi
}

# Start full system update
_update_full() {
    # check for "pacman-mirrors" or "reflector" packages. one of those is needed!
    if [ -x "$(command -v pacman-mirrors)" ] || [ -x "$(command -v reflector)" ]; then

        echo " updating the system ..."
        # removing partially downloaded files from pacman cache. this can prevent pacman updates
        # check, whether outupt of sudo find "$cache" -type f -iname "*.part" is non-zero (i.e. not empty).
        # "sudo find "$cache" -type f -iname "*.part"" searches partially downloaded files (file name ends with ".part") in pacman cache.
        if [[ -n "$(sudo find /var/cache/pacman/pkg/ -iname "*.part" -type f)" ]]; then
            echo " deleting partially downloaded packages from cache ..."
            sudo find /var/cache/pacman/pkg/ -iname "*.part" -exec rm {} \;
            echo ""
        fi

        if [[ "$INTERACTIVEMODE" == "1" ]]; then
            _interactive_update
        else
            # checks, whether file "pacman-mirrors" exists
            if [ -x "$(command -v pacman-mirrors)" ]; then
                echo ""
                # choose mirrors server and sync database.
                if (sudo pacman-mirrors -f 3); then
                    echo ""
                    # try to give it enough time to write the mirror-list, to avoid 404 errors
                    sleep 2
                    # check for updates and start full sync, system update/downgrade
                    sudo pacman -Syyuu --noconfirm
                    # check for AUR helpers
                    _aur_update
                fi

            # checks, whether file "reflector" exists
            # If it does exists, then the mirror will sort by it
            elif [ -x "$(command -v reflector)" ]; then
                if (sudo reflector --verbose --protocol https --age 6 --delay 6 --sort rate --connection-timeout 2 --score 30 --fastest 10 --save /etc/pacman.d/mirrorlist); then
                    echo ""
                    sleep 2
                    # check for updates and start full sync, system update/downgrade
                    sudo pacman -Syyuu --noconfirm
                    # check for AUR helpers
                    _aur_update
                fi
            fi
        fi
        echo ""
    fi

    echo " searching orphans ..."
    if [[ "$AUR_Helper" == "yay" ]]; then
        # do orphan cleaning with yay
        yay -Yc
    elif [[ "$AUR_Helper" == "pamac" ]]; then
        # do orphan cleaning with pamac
        pamac remove -o --no-confirm
    elif [[ "$AUR_Helper" == "paru" ]]; then
        # do orphan cleaning with paru
        paru -c
    # do this for all other AUR helpers:
    else
        # only run the following commands, if output of "pacman -Qdt" is not empty.
        if [[ -n "$(pacman -Qdt)" ]]; then
            # display orphaned packages
            pacman -Qdt --color always
            # ask, whether to remove the displayed orphaned packages:
            echo -e " \e[41m Do you want to remove these orphaned packages? [Y|n] \e[0m"
            # save user input in "answer" variable (only accept 1 character as input)
            read -r -n 1 -e answer

            # if ENTER is pressed, the variable "answer" is empty. if "answer" is empty, its default value is "y".
            case ${answer:-y} in
            # do this, if "answer" is y or Y or yes or YES or Yes
            y | Y | yes | YES | Yes)
                # ATTENTION: I do not know why but using quotes " symbols around $(...) breaks pacman command for multiple packages
                sudo pacman -Rsn $(pacman -Qqdt) --color always --noconfirm
                ;;
            *)
                # do this in all other cases
                echo -e " \e[1m Packages have not been removed.\e[0m"
                ;;
                # end of "case" loop
            esac
        fi
    fi
    echo ""

    echo " checking systemctl ..."
    # "LC_ALL=C" forces the output to use english language. this is important, if the output is queried.
    if [[ "$(LC_ALL=C systemctl is-system-running)" != "running" ]]; then
        echo -e "\e[1m\e[32m==>\e[0m \e[1mThe following systemd service(s) have failed. Please fix them manually.\e[0m"
        echo -e "\e[1m\e[32m==>\e[0m \e[1mDisplay detailed information about a systemd service with: systemctl status <SYSTEMD SERVICE NAME>\e[0m"
        echo
        systemctl list-units --state=failed
        echo
    fi
    echo ""

    if [[ "$SYMLINKCHECK" == "1" ]]; then
        echo " checking symlinks ..."
        # only run, if output of "sudo find -xtype l -print" is not empty
        if [[ -n "$(sudo find -xtype l)" ]]; then
            echo -e "\e[1m\e[32m==>\e[0m \e[1mThe following symbolic links are broken, please fix them manually:\e[0m"
            sudo find -xtype l
            echo ""
        fi
    fi

    echo " checking consistency of local repository ..."
    # check, whether "pacman -Dk" command finishes with errors, but do not output anything when this command runs with "&>/dev/null"
    if ! (pacman -Dk &>/dev/null); then
        echo -e " \e[41m The following inconsistencies have been found in your local packages: \e[0m"
        # encapsulate "pacman -Dk" in echo command. without this, the strict bash mode would quit pacui whenever "pacman -Dk" encounters an error!
        echo -e "$(pacman -Dk)"
    fi
    echo ""

    # check, if output of "$AUR_Helper" is non-zero
    if [[ -n "$AUR_Helper" ]]; then
        echo " checking AUR packages (which can take a while) ..."
        # download AUR package list to /tmp/pacui-aur/packages.

        curl --url 'https://aur.archlinux.org/packages.gz' --create-dirs --output "/tmp/pacui-aur/packages.gz" &>/dev/null && gunzip -f "/tmp/pacui-aur/packages.gz"
        # now, file /tmp/pacui-aur/packages contains an unsorted list of all packages from the AUR with the download date on top (in a commented line).

        # check, if /tmp/pacui-aur/packages exists. /tmp/pacui-aur/packages does not exist, if there is no internet connection or something went wrong during the download of the list of AUR packages.
        if [[ -f /tmp/pacui-aur/packages ]]; then

            local pkg
            # the "comm" command compares 2 files and outputs the differences between them. both files have to be sorted!
            # "pacman -Qqm | sort" outputs a list of all installed packages from the AUR
            #pkg=$(  comm -23 <(pacman -Qqm | sort) <(sort -u /tmp/pacui-aur/packages.gz)  )
            pkg="$(comm -23 <(pacman -Qqm | sort) <(sort -u /tmp/pacui-aur/packages))"

            # only run the command inside the if-statement, if $pkg variable is not empty
            # checks, if length of string is non-zero ("-n" conditional bash expression is the opposite of "-z" (check, whether length of string is zero))
            if [[ -n "$pkg" ]]; then
                echo -e "\e[1m\e[32m==>\e[0m \e[1mThe following packages are neither in your package repository nor the AUR.\e[0m"
                echo -e "\e[1m\e[32m==>\e[0m \e[1mThey are orphaned and will never be updated. \e[0m"
                echo -e "\e[1m\e[32m==>\e[0m \e[1mIt is recommended to remove these packages carefully: \e[0m"
                echo "$pkg"
            fi

        fi
    fi

    echo ""
    echo " checking for packages moved to the AUR ..."
    local pkg
    # "pacman -Qqm" lists all packages, which are not from the system repositories.  "pacman -Qqem" lists all files, which were explicitly installed, but are not present in the system repositories.
    # comm -23 only outputs unique packages from the 1. list (not present in the 2. list)
    pkg="$(comm -23 <(pacman -Qqm | sort) <(pacman -Qqem | sort))"

    # only run the command inside the if-statement, if $pkg variable is not empty
    # checks, if length of string is non-zero ("-n" conditional bash expression is the opposite of "-z" (check, whether length of string is zero))
    if [[ -n "$pkg" ]]; then
        echo -e "\e[1m\e[32m==>\e[0m \e[1mThe following packages were not explicitly installed and are not part of your system repository.\e[0m"
        echo -e "\e[1m\e[32m==>\e[0m \e[1mIf no important packages depend on them, it is recommended to remove these packages carefully:\e[0m"
        echo "$pkg"
        echo ""
    fi

    # if init system is systemd
    if [[ "$(cat /proc/1/comm)" == "systemd" ]]; then
        echo " cleaning systemd log files ..."
        # limit logs in journalctl to an age of 30 days and a combined size of 50mb
        sudo journalctl --vacuum-size=100M --vacuum-time=30days
    fi
    echo ""

    echo " cleaning package cache ..."
    # remove all packages, which are not installed on this system, except the latest versions (this is a back up, in case somebody removes networkmanager)
    sudo paccache -rvu -k 1
    echo ""
    # remove all package versions, except the latest 2
    sudo paccache -rv -k 2
    echo ""
    # general comment: "pacaur" is currently the only aur helper, which creates its own download directory for aur packages. the content of this download folder can be cleaned with "pacaur -Sc". But "pacaur -Sc" removes too many files and is therefore not used here.

    # declare local variable
    local installed_kernels
    # filter installed kernels from boot sector and determine, which package owns that file. this yields the package name of all installed kernels (including kernels from the AUR):
    # search for one of the following (hardcoded) package names of the linux kernel within arch linux (linux, linux-lts, linux-zen, or linux-hardened) or manjaro (linuxXY).
    installed_kernels="$(pacman -Qq | grep -E '^linux$|^linux-lts$|^linux-zen$|^linux-hardened$|^linux[0-9]*$' | sort -u)"
    # check, whether any installed kernels have been found  (in ARCH linux, no kernels are found, but this is ok, because kernels are not EOLd as in Manjaro)
    if [[ -n "$installed_kernels" ]]; then
        echo " checking installed kernel(s) ..."

        # declare local variables
        local {available_kernels,eol_kernels}
        # Check if installed kernels are available in repositories and forward it/them to available_kernels variable:
        available_kernels="$(
            for p in $(# ATTENTION: using quotes (" symbols) around $(...) breaks for-loop
                echo "$installed_kernels"
            ); do
                pacman -Ssq "^$p$"
            done | sort -u
        )"
        # filter kernels to $eol_kernels variable, which are installed but no longer available:
        eol_kernels="$(comm -13 <(echo "$available_kernels") <(echo "$installed_kernels"))"
        # print warning message, if end-of-life kernel(s) are found:
        if [[ -n "$eol_kernels" ]]; then
            echo
            echo -e "\e[1m\e[32m==>\e[0m \e[1mThe following Linux kernel(s) are no longer available in your system repositories.\e[0m"
            echo -e " \e[1m Do not expect any security or stability fixes for the(se) kernel(s) anymore. \e[0m"
            echo -e " \e[1m Kernel modules are likely to break. It is recommended to remove the kernel(s).\e[0m"
            echo -e " \e[1m If the(se) kernel(s) are taken from the AUR, you may safely ignore this warning. \e[0m"
            echo "$eol_kernels"
        fi

        if [[ -d /tmp/pacui-aur ]]; then
            echo ""
            echo " deleting cache ..."
            sudo rm -r /tmp/pacui*

        fi
        echo ""
    fi
}

# Run pacdiff
_pacdiff() {
    echo " checking pacdiff ..."
    if [[ -n $DIFFPROG ]]; then # this if-condition avoids error message when $DIFFPROG is not set/empty
        pacdiff -s
    else
        if [ -x "$(command -v meld)" ]; then # If file exists
            # use "meld" when possible if DIFFPROG is unset
            DIFFPROG="meld" pacdiff -s
        else
            echo -e "\e[1m\e[32m==>\e[0m \e[1mPlease install Meld, or set the \"DIFFPROG\" environment variable manually.\e[0m"
        fi
    fi
    echo ""
}

# Update snaps if installed
_snapd() {
    if [ -x "$(command -v snap)" ]; then
        echo " updating snap packages ..."
        sudo snap refresh
        sudo snap set system refresh.retain=2
        echo ""
    fi
}

# Update Flatpaks if installed and clean up unused Flatpaks
_flatpak() {
    if [ -x "$(command -v flatpak)" ]; then
        echo " updating flatpak packages ..."
        flatpak update -y
        echo ""
        echo -e " removing orphaned flatpak packages ..."
        flatpak uninstall --unused --delete-data -y
        echo ""
        return
    fi
}

# Ask if Symlinks should be checked (interactive mode)
_symlinkchecker() {
    if [[ "$INTERACTIVEMODE" == "1" ]]; then
        echo -e "\e[1m Do you want to also check for broken symbolic links, which can take longer? [Y|n]\e[0m"
        # save user input in "answer" variable (only accept 1 character as input)
        read -r -n 1 -e answer

        # if ENTER is pressed, the variable "answer" is empty. if "answer" is empty, its default value is "no".
        case ${answer:-n} in
        # do this, if "answer" is y or Y
        y | Y)
            SYMLINKCHECK=1
            ;;
        *)
            # do this in all other cases
            # if "answer" is empty, display default text
            if [ -z "$answer" ]; then
                echo " default: No"
            fi
            SYMLINKCHECK=0
            ;;
            # end of "case" loop
        esac
        echo ""
    fi
}

# Ask if "--noconfirm" should be enabled (interactive mode)
_noconfirmcheck() {
    if [[ "$INTERACTIVEMODE" == "1" ]]; then
        echo -e "\e[1m Do you want to skip confirmation dialogs, enable \"noconfirm\"? [Y|n]\e[0m"
        read -r -n 1 -e answer

        case ${answer:-n} in
        y | Y)
            NOCONFIRMFLAG="1"
            ;;
        *)
            # if "answer" is empty, display default text
            if [ -z "$answer" ]; then
                echo " default: No"
                NOCONFIRMFLAG="2"
            fi
            ;;
        esac
        echo ""
    fi
}

_interactive_update() {
    if [ -x "$(command -v pacman-mirrors)" ]; then # checks, whether file "pacman-mirrors" exists

        echo -e "\e[1m Do you want to update the mirrorlist with \"pacman-mirrors\"? [Y|n]\e[0m"
        read -r -n 1 -e answer

        case ${answer:-n} in
        y | Y)
            # choose mirrors server and sync database.
            if (sudo pacman-mirrors -f 3); then
                echo ""
                # try to give it enough time to write the mirror-list, to avoid 404 errors
                sleep 2
                # check for updates and start full sync, system update/downgrade
                if [[ "$NOCONFIRMFLAG" == "1" ]]; then
                    sudo pacman -Syyuu --noconfirm
                else
                    sudo pacman -Syyuu
                fi
                # check for AUR helpers
                _aur_update
            fi
            ;;
        *)
            # do this in all other cases
            # if "answer" is empty, display default text
            if [ -z "$answer" ]; then
                echo " default: No"
            fi
            echo ""
            # check for updates and start full sync, system update/downgrade
            if [[ "$NOCONFIRMFLAG" == "1" ]]; then
                sudo pacman -Syyuu --noconfirm
            else
                sudo pacman -Syyuu
            fi
            # check for AUR helpers
            _aur_update
            ;;
            # end of "case" loop
        esac

    # checks, whether file "reflector" exists
    elif [ -x "$(command -v reflector)" ]; then

        echo -e "\e[1m Do you want to update the mirrorlist with \"reflector\"? [Y|n]\e[0m"
        read -r -n 1 -e answer

        case ${answer:-n} in
        y | Y)
            if (sudo reflector --verbose --protocol https --age 6 --delay 6 --sort rate --connection-timeout 2 --score 30 --fastest 10 --save /etc/pacman.d/mirrorlist); then
                echo ""
                sleep 2
                # check for updates and start full sync, system update/downgrade
                if [[ "$NOCONFIRMFLAG" == "1" ]]; then
                    sudo pacman -Syyuu --noconfirm
                else
                    sudo pacman -Syyuu
                fi
                _aur_update
            fi
            ;;
        *)
            # do this in all other cases
            # if "answer" is empty, display default text
            if [ -z "$answer" ]; then
                echo " default: No"
            fi
            echo ""
            # check for updates and start full sync, system update/downgrade
            if [[ "$NOCONFIRMFLAG" == "1" ]]; then
                sudo pacman -Syyuu --noconfirm
            else
                sudo pacman -Syyuu
            fi
            _aur_update
            ;;
        esac
    fi
}

# Function to request sudo privileges
_request_sudo() {
    # non-interactive check for sudo
    # if "sudo -n" is not true, it returns exit code 1
    if ! sudo -n true 2>/dev/null; then
        # echo "Please enter your password for sudo:"
        # update user's timestamp without running a command
        sudo -v
        echo ""
    fi
}

########################
### Run the Script.. ###
########################
_main() {

    time {

        # refresh sudo periodically if the function takes longer to execute with a background loop
        while true; do
            sleep 60 # refresh every minute
            _request_sudo
        done &

        # echo "Background loop started with PID: $!"
        bg_pid=$!

        echo ""
        echo " Starting System Maintenance!"
        _request_sudo
        _noconfirmcheck
        _symlinkchecker
        _check_aur_helper
        _db_check
        _update_full
        _pacdiff
        _flatpak
        _snapd

        echo -e "\e[1m Elapsed Time: \e[0m"
    }
    echo ""
    echo -e " \e[7m Press [ENTER] to exit \e[0m"
    # wait for input, e.g. by pressing ENTER:
    read -r

    # kill background loop before exit
    kill $bg_pid
    exit
}

# Flags
while test $# -gt 0; do
    case "$1" in
    -h | --help)
        echo ""
        echo -e " Welcome to the Help Page!"
        echo -e " [maus] runs by default without flags, but also provides advanced options."
        echo ""
        echo -e " maus [option]:"
        echo -e ""
        echo -e " -a, --aur         - [SET AUR_HELPER]"
        echo -e "                     Set the desired AUR Helper manually"
        echo ""
        echo -e " -i, --interactive - [INTERACTIVE MODE]"
        echo -e "                     Guided run with more options, includig the (-a, --aur) flag"
        echo ""
        echo -e " -l, --list        - [LIST AUR_HELPER]"
        echo -e "                     List all supported AUR Helper"
        echo ""
        echo -e " -h, --help        - This Help Text"
        echo ""
        exit
        ;;
    -a | --aur)
        echo " Supported AUR Helpers:"
        echo " pamac | yay | pikaur | aurman | pakku | trizen | pacaur | paru"
        echo ""
        echo -e "\e[1m Type in one of the supported AUR Helpers here and press [ENTER]:\e[0m"
        read -r HELPER
        if [ -n "$HELPER" ]; then # if variable is not empty
            AUR_Helper="$HELPER"
        else
            echo " no AUR Helper specified, using auto detection ..."
            AUR_Helper=""
        fi
        _main
        ;;
    -i | --interactive)
        INTERACTIVEMODE=1
        echo " Supported AUR Helpers:"
        echo " pamac | yay | pikaur | aurman | pakku | trizen | pacaur | paru"
        echo ""
        echo -e "\e[1m Type in one of the supported AUR Helpers here and press [ENTER], or leave empty for auto detection:\e[0m"
        read -r HELPER
        if [ -n "$HELPER" ]; then # if variable is not empty
            AUR_Helper="$HELPER"
        else
            echo " no AUR Helper specified, using auto detection ..."
            AUR_Helper=""
        fi
        _main
        ;;
    -l | --list)
        echo " Supported AUR Helpers:"
        echo " pamac | yay | pikaur | aurman | pakku | trizen | pacaur | paru"
        exit # this "exit" command is needed to prevent the UI from loading!
        ;;
    *)
        echo -e "Wrong Option, Please run \"maus -h\""
        exit 1
        ;;
    esac
done

_main
